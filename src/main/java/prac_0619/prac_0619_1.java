package prac_0619;

public class prac_0619_1 {
    public static void main(String[] args) {
        //TCP 참고해서.... 왜 이렇게 됐나 따져보기
        // 메인 메소드의 안쪽 상황을 순차적으로 글로 써보기

        // new가 실행되어 객체가 생성될 때, 생성자가 실행된다.
        // 인자값으로 "김철수"가 생성자로 넘어간다(거의 동시에 이루어짐)
        사람 사람1 = new 사람("김철수"); // 인자값이 없을 경우, 기본 생성자 호출, 인자값이 있으면 그에 맞는 생성자가 실행된다.
        사람 사람3 = new 김철수("김철수");  // 상속받았을때의 생성자 호출, 자식클래스를 호출할때는 기본생성자가 실행된 후 형태에 맞는 자식클래스의 생성자가 실행된다.
        // 출력
        System.out.println("==사람1 정보==");
        // 생성자에 주어진 인자로 인해 사람1의 이름이 김철수로 초기화된다.
        System.out.printf("이름: %s\n", 사람1.이름);  //김철수
        // 생성자에 나이를 22로 지
        System.out.printf("이름: %d\n", 사람1.나이);  //22


        사람 사람2 = new 사람("김영희");

        System.out.println("==사람2 정보==");

        System.out.printf("이름: %s\n", 사람2.이름);  //김영희

        System.out.printf("이름: %d\n", 사람2.나이);  //22
    }
}
//부모의 생성자 먼저 호출


class 사람 {  //클래스
    String 이름;
    int 나이;

    사람() {     //생성자
        System.out.println("생성자 호출됨1");
        this.이름 = 이름;
        this.나이 = 22;
    }

    사람(String 이름) {     //생성자
        System.out.println("생성자 호출됨2");
        this.이름 = 이름;       //매개변수로부터 넘어온 인자값(이름)을 받음
        this.나이 = 22;
    }
}

class 김철수 extends 사람{
    김철수() {
        System.out.println("김철수 생성자 호출됨3");
        this.이름 = "김철수";
    }

    김철수(String 이름) {
        System.out.println("김철수 생성자 호출됨4");
        this.이름 = 이름;
    }
}

//사람 사람1 = new 김철수();
//부모의 생성자 먼저 호출 후 자식의 생성자를 호출된다.(규칙)
//

//부모의 생성자가 호출이 됐기 때문에 ... 자식의 생성자가 호출이 안되어도 .... 들어감.... ?


//값이 채워지는 과정.. ?

//

//상속관계에서의 생성자 사용.....

